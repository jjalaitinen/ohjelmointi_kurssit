package rekisteri.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import rekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.13 02:40:47 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class FrisbeegolfrekisteriTest {



  // Generated by ComTest BEGIN
  /** testAnnaRadat54 */
  @Test
  public void testAnnaRadat54() {    // Frisbeegolfrekisteri: 54
    Frisbeegolfrekisteri rekisteri = new Frisbeegolfrekisteri(); 
    Pelaaja pelaaja1 = new Pelaaja(); 
    Pelaaja pelaaja2 = new Pelaaja(); 
    Pelaaja pelaaja3 = new Pelaaja(); 
    pelaaja1.rekisteroi(); pelaaja2.rekisteroi(); pelaaja3.rekisteroi(); 
    int id1 = pelaaja1.getTunnusNro(); 
    int id2 = pelaaja2.getTunnusNro(); 
    Rata rata11 = new Rata(id1); rekisteri.lisaa(rata11); 
    Rata rata12 = new Rata(id1); rekisteri.lisaa(rata12); 
    Rata rata21 = new Rata(id2); rekisteri.lisaa(rata21); 
    Rata rata22 = new Rata(id2); rekisteri.lisaa(rata22); 
    Rata rata23 = new Rata(id2); rekisteri.lisaa(rata23); 
    List<Rata> loytyneet; 
    loytyneet = rekisteri.annaRadat(pelaaja3); 
    assertEquals("From: Frisbeegolfrekisteri line: 72", 0, loytyneet.size()); 
    loytyneet = rekisteri.annaRadat(pelaaja1); 
    assertEquals("From: Frisbeegolfrekisteri line: 74", 2, loytyneet.size()); 
    assertEquals("From: Frisbeegolfrekisteri line: 75", true, loytyneet.get(0) == rata11); 
    assertEquals("From: Frisbeegolfrekisteri line: 76", true, loytyneet.get(1) == rata12); 
    loytyneet = rekisteri.annaRadat(pelaaja2); 
    assertEquals("From: Frisbeegolfrekisteri line: 78", 3, loytyneet.size()); 
    assertEquals("From: Frisbeegolfrekisteri line: 79", true, loytyneet.get(0) == rata21); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa89 */
  @Test
  public void testLisaa89() {    // Frisbeegolfrekisteri: 89
    Frisbeegolfrekisteri rekisteri = new Frisbeegolfrekisteri(); 
    Pelaaja make = new Pelaaja(); 
    Pelaaja pera = new Pelaaja(); 
    make.rekisteroi(); pera.rekisteroi(); 
    assertEquals("From: Frisbeegolfrekisteri line: 94", 0, rekisteri.getPelaajia()); 
    rekisteri.lisaa(make); 
    assertEquals("From: Frisbeegolfrekisteri line: 96", 1, rekisteri.getPelaajia()); 
    rekisteri.lisaa(pera); 
    assertEquals("From: Frisbeegolfrekisteri line: 98", 2, rekisteri.getPelaajia()); 
    assertEquals("From: Frisbeegolfrekisteri line: 99", make, rekisteri.annaPelaaja(0)); 
    assertEquals("From: Frisbeegolfrekisteri line: 100", pera, rekisteri.annaPelaaja(1)); 
    rekisteri.lisaa(make); 
    assertEquals("From: Frisbeegolfrekisteri line: 102", 3, rekisteri.getPelaajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa113 */
  @Test
  public void testLisaa113() {    // Frisbeegolfrekisteri: 113
    Frisbeegolfrekisteri rekisteri = new Frisbeegolfrekisteri(); 
    Pelaaja pelaaja1 = new Pelaaja(); 
    Pelaaja pelaaja2 = new Pelaaja(); 
    rekisteri.lisaa(pelaaja1); 
    rekisteri.lisaa(pelaaja2); 
    rekisteri.lisaa(pelaaja1); 
    Collection<Pelaaja> loytyneet = rekisteri.etsi("", -1); 
    Iterator<Pelaaja> it = loytyneet.iterator(); 
    assertEquals("From: Frisbeegolfrekisteri line: 122", pelaaja1, it.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 123", pelaaja2, it.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 124", pelaaja1, it.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta174 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta174() throws SailoException {    // Frisbeegolfrekisteri: 174
    Frisbeegolfrekisteri rekisteri = new Frisbeegolfrekisteri(); 
    Pelaaja pelaaja1 = new Pelaaja(); pelaaja1.taytaTestiTiedot(); pelaaja1.rekisteroi(); 
    Pelaaja pelaaja2 = new Pelaaja(); pelaaja2.taytaTestiTiedot(); pelaaja2.rekisteroi(); 
    Rata rata11 = new Rata(); rata11.taytaRandmTiedot(pelaaja1.getTunnusNro()); 
    Rata rata21 = new Rata(); rata21.taytaRandmTiedot(pelaaja2.getTunnusNro()); 
    Rata rata12 = new Rata(); rata12.taytaRandmTiedot(pelaaja1.getTunnusNro()); 
    Rata rata22 = new Rata(); rata22.taytaRandmTiedot(pelaaja2.getTunnusNro()); 
    Rata rata23 = new Rata(); rata23.taytaRandmTiedot(pelaaja2.getTunnusNro()); 
    String hakemisto = "testirekisteri"; 
    File dir = new File(hakemisto); 
    File ftied = new File(hakemisto+"/pelaajat.dat"); 
    File frtied = new File(hakemisto+"/radat.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    frtied.delete(); 
    try {
    rekisteri.lueTiedostosta(hakemisto); 
    fail("Frisbeegolfrekisteri: 196 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    rekisteri.lisaa(pelaaja1); 
    rekisteri.lisaa(pelaaja2); 
    rekisteri.lisaa(rata11); 
    rekisteri.lisaa(rata12); 
    rekisteri.lisaa(rata21); 
    rekisteri.lisaa(rata22); 
    rekisteri.lisaa(rata23); 
    rekisteri.tallenna(); 
    rekisteri = new Frisbeegolfrekisteri(); 
    rekisteri.lueTiedostosta(hakemisto); 
    Collection<Pelaaja> kaikki = rekisteri.etsi("", -1); 
    Iterator<Pelaaja> it = kaikki.iterator(); 
    assertEquals("From: Frisbeegolfrekisteri line: 209", pelaaja1, it.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 210", pelaaja2, it.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 211", false, it.hasNext()); 
    List<Rata> loytyneet = rekisteri.annaRadat(pelaaja1); 
    Iterator<Rata> ih = loytyneet.iterator(); 
    assertEquals("From: Frisbeegolfrekisteri line: 214", rata11, ih.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 215", rata12, ih.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 216", false, ih.hasNext()); 
    loytyneet = rekisteri.annaRadat(pelaaja2); 
    ih = loytyneet.iterator(); 
    assertEquals("From: Frisbeegolfrekisteri line: 219", rata21, ih.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 220", rata22, ih.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 221", rata23, ih.next()); 
    assertEquals("From: Frisbeegolfrekisteri line: 222", false, ih.hasNext()); 
    rekisteri.lisaa(pelaaja2); 
    rekisteri.lisaa(rata23); 
    rekisteri.tallenna(); 
    assertEquals("From: Frisbeegolfrekisteri line: 226", true, ftied.delete()); 
    assertEquals("From: Frisbeegolfrekisteri line: 227", true, frtied.delete()); 
    File fbak = new File(hakemisto+"/pelaajat.bak"); 
    File frbak = new File(hakemisto+"/radat.bak"); 
    assertEquals("From: Frisbeegolfrekisteri line: 230", true, fbak.delete()); 
    assertEquals("From: Frisbeegolfrekisteri line: 231", true, frbak.delete()); 
    assertEquals("From: Frisbeegolfrekisteri line: 232", true, dir.delete()); 
  } // Generated by ComTest END
}