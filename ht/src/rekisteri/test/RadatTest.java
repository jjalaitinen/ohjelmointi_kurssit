package rekisteri.test;
// Generated by ComTest BEGIN
import rekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import java.io.File;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.13 02:57:14 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RadatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta122 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta122() throws SailoException {    // Radat: 122
    Radat ratoja = new Radat(); 
    Rata rata11 = new Rata(); rata11.taytaRandmTiedot(1); 
    Rata rata21 = new Rata(); rata21.taytaRandmTiedot(2); 
    Rata rata12 = new Rata(); rata12.taytaRandmTiedot(1); 
    Rata rata22 = new Rata(); rata22.taytaRandmTiedot(2); 
    Rata rata23 = new Rata(); rata23.taytaRandmTiedot(2); 
    String tiedNimi = "testiRadat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    ratoja.lueTiedostosta(tiedNimi); 
    fail("Radat: 135 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    ratoja.lisaa(rata21); 
    ratoja.lisaa(rata11); 
    ratoja.lisaa(rata22); 
    ratoja.lisaa(rata12); 
    ratoja.lisaa(rata23); 
    ratoja.tallenna(); 
    ratoja = new Radat(); 
    ratoja.lueTiedostosta(tiedNimi); 
    Iterator<Rata> i = ratoja.iterator(); 
    assertEquals("From: Radat line: 145", rata21.toString(), i.next().toString()); 
    assertEquals("From: Radat line: 146", rata11.toString(), i.next().toString()); 
    assertEquals("From: Radat line: 147", rata22.toString(), i.next().toString()); 
    assertEquals("From: Radat line: 148", rata12.toString(), i.next().toString()); 
    assertEquals("From: Radat line: 149", rata23.toString(), i.next().toString()); 
    assertEquals("From: Radat line: 150", false, i.hasNext()); 
    ratoja.lisaa(rata23); 
    ratoja.tallenna(); 
    assertEquals("From: Radat line: 153", true, ftied.delete()); 
    File fbak = new File(tiedNimi +".bak"); 
    assertEquals("From: Radat line: 155", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator235 */
  @Test
  public void testIterator235() {    // Radat: 235
    Radat ratoja = new Radat(); 
    Rata jankha1 = new Rata(2); ratoja.lisaa(jankha1); 
    Rata jankha2 = new Rata(1); ratoja.lisaa(jankha2); 
    Rata jankha3 = new Rata(2); ratoja.lisaa(jankha3); 
    Rata jankha4 = new Rata(1); ratoja.lisaa(jankha4); 
    Rata jankha5 = new Rata(2); ratoja.lisaa(jankha5); 
    Iterator<Rata> ite = ratoja.iterator(); 
    assertEquals("From: Radat line: 247", jankha1, ite.next()); 
    assertEquals("From: Radat line: 248", jankha2, ite.next()); 
    assertEquals("From: Radat line: 249", jankha3, ite.next()); 
    assertEquals("From: Radat line: 250", jankha4, ite.next()); 
    assertEquals("From: Radat line: 251", jankha5, ite.next()); 
    try {
    assertEquals("From: Radat line: 252", jankha3, ite.next()); 
    fail("Radat: 252 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n=0; 
    int[] pelnum = { 2,1,2,1,2} ; 
    for (Rata rat : ratoja) {
    assertEquals("From: Radat line: 258", pelnum[n], rat.getPelaajaNro()); n++; 
    }
    assertEquals("From: Radat line: 260", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRadat274 */
  @Test
  public void testAnnaRadat274() {    // Radat: 274
    Radat ratoja1 = new Radat(); 
    Rata lauste12 = new Rata(2); ratoja1.lisaa(lauste12); 
    Rata lauste11 = new Rata(1); ratoja1.lisaa(lauste11); 
    Rata lauste21 = new Rata(1); ratoja1.lisaa(lauste21); 
    Rata lauste22 = new Rata(2); ratoja1.lisaa(lauste22); 
    Rata lauste15 = new Rata(5); ratoja1.lisaa(lauste15); 
    Rata lauste32 = new Rata(2); ratoja1.lisaa(lauste32); 
    List<Rata> palautettavat; 
    palautettavat = ratoja1.annaRadat(3); 
    assertEquals("From: Radat line: 287", 0, palautettavat.size()); 
    palautettavat = ratoja1.annaRadat(1); 
    assertEquals("From: Radat line: 289", 2, palautettavat.size()); 
    assertEquals("From: Radat line: 290", true, palautettavat.get(0) == lauste11); 
    assertEquals("From: Radat line: 291", true, palautettavat.get(1) == lauste21); 
    palautettavat = ratoja1.annaRadat(5); 
    assertEquals("From: Radat line: 293", 1, palautettavat.size()); 
    assertEquals("From: Radat line: 294", true, palautettavat.get(0) == lauste15); 
  } // Generated by ComTest END
}